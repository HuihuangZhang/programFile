#ifndef AVL_NODE
#define AVL_NODE
template <class Entry>
struct AvlNode {
    Entry entry;
    AvlNode<Entry> *left;
    AvlNode<Entry> *right;
    int bf;                // balance factor 平衡因子
};
#endif

// 判断一颗树是否为平衡二叉树
template <class Entry>
bool is_AVL_Tree(AvlNode<Entry> *&root) {
	int temp = 0;
	if (isBalance(root, &temp))
	    return true;
	return false;
}

//判断一棵树是否平衡，通过递归左右子树，如果在左右子树中发现不平衡，则返回false
//@diff为左右子树的高度差；
//@depth1为左子树高度;
//@depth2为右子树高度；
template <class Entry>
bool isBalance(AvlNode<Entry> *&root,int *depth) {
    //叶子的左右子树为空，此时树高度为0，退出递归的条件
    if (root == NULL) {
        *depth = 0;
        return true;
    }
    int depthl,depth2;
    
    //进入递归
    if(!isBalance(root->left,&depthl))return false;
    if(!isBalance(root->right,&depth2))return false;
    int diff = depthl - depth2;
    if(diff > 1 || diff < -1)return false;
    *depth = 1+(depthl>depth2?depthl:depth2);      //关键：树高为左右子树的最大高度加1
    return true;
}
