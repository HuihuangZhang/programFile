//利用数组实现哈夫曼树

#include <iostream>
#define MAXVALUE 10000
#define MAXSIZE 1000
using namespace std;

typedef struct{
  int parent;
  int lchild;
  int rchild;
  int weight;
  char value;
}node;
node hufftree[MAXSIZE];

int main() {
  int number_char, sum, temp;
  char _char;
  cin >> number_char;
  for (int i = 0; i < 2 * number_char - 1; i++) {
    hufftree[i].parent = -1;
    hufftree[i].lchild = -1;
    hufftree[i].rchild = -1;
  }
  for (int i = 0; i < number_char; ++i) {
    cin >> hufftree[i].value >> hufftree[i].weight;
  }

  int i, j, min1, min2, index1, index2;
  sum = 0;
  for (i = 0; i < number_char - 1; i++) {
    min1 = min2 = MAXVALUE;
    index1 = index2 = 0;
    for (j = 0; j < number_char + i; j++) {
      if (hufftree[j].weight < min1 && hufftree[j].parent == -1) {
        min2 = min1;
        index2 = index1;
        min1 = hufftree[j].weight;
        index1 = j;
      }
      else if(hufftree[j].weight < min2 && hufftree[j].parent == -1) {
        min2 = hufftree[j].weight;
        index2 = j;
      }
    }
    hufftree[index1].parent = number_char + i;
    hufftree[index2].parent = number_char + i;
    hufftree[number_char + i].weight = min1 + min2;
    hufftree[number_char + i].lchild = index1;
    hufftree[number_char + i].rchild = index2;
    sum += min1 + min2;
  }
  cout << sum << endl;
  return 0;
}                                 
